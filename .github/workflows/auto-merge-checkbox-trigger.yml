# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on: 
  pull_request:
    types: [ "edited" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  metadata:
    #if: ${{github.event.changes.body !== undefinied}}
    runs-on: ubuntu-latest
    outputs:
      migrations: ${{ steps.tasks.outputs.migrations }}
      reversable: ${{ steps.tasks.outputs.reversable }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Parse Tasks
        id: tasks
        shell: python
        env: 
          BODY: ${{github.event.pull_request.body}}
        run: | 
          from os import environ
          import re
          import json

          def parse_body(body):
            """
            Search all lines for the following pattern match
            # input: "- [ ] <!-- {"name":"reversable"} --> cannot be rolled back (tally tokens, view or migration changes, API changes)."
            # output: {"my-task":"disable"}
            
            # input: "- [X] <!-- {"name":"migrations"} --> migrations/[view changes](https://www.notion.so/janeapp/Database-Views-cacde92491b046fba9da3d2eb107debf).[^1]"
            # output: {"migrations":"enable"}
            
            """
            pattern = re.compile(r"- \[([\sxX])\] <!-- ?(\{.*\}) ?--> ?(.*)")
            tasks = pattern.findall(body)
            ctx = {}
            for task in tasks:
              metadata = json.loads(task[1])
              name = metadata["name"]
              value = "disable" if task[0] == " " else "enable"
              ctx[name] = value
            return ctx

          print("starting...")
          body = environ.get("BODY", "")
          tasks = parse_body(body)
          for name, value in tasks.items():
            print(name, value)
            print(f"::set-output name={name}::{value}")
          

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - uses: actions/checkout@v3

      # # Runs a single command using the runners shell
  migrations:
    needs: [metadata]
    if: ${{needs.metadata.outputs.migrations == 'enable'}}
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{toJSON(needs)}}'
      - name: rake migrations
        run: sleep $((RANDOM % 10)) 
  
  deploy:
    needs: [migrations]
    if: always() && !cancelled() && needs.migrations.result != 'failure'
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{toJSON(needs)}}'
      - name: deploying
        run: sleep $((RANDOM % 10)) 
      # - uses: actions/github-script@v6
      #   with:
      #     script: |
      #       function groupBy(list, keyGetter) {
      #           const map = new Map();
      #           list.forEach((item) => {
      #               const key = keyGetter(item);
      #               const collection = map.get(key);
      #               if (!collection) {
      #                   map.set(key, [item]);
      #               } else {
      #                   collection.push(item);
      #               }
      #           });
      #           return map;
      #       }
      #       const opts = github.rest.pulls.list({
      #         ...context.repo,
      #         state: "open",
      #         base: "main",
      #       });
      #       const pulls = await github.paginate(opts)

      #       for const pull
      #       // Get a list of all issues created by the PR opener
      #       // See: https://octokit.github.io/rest.js/#pagination
      #       const creator = context.payload.sender.login
      #       const opts = github.rest.issues.listForRepo.endpoint.merge({
      #         ...context.issue,
      #         creator,
      #         state: 'all'
      #       })
      #       const issues = await github.paginate(opts)

      #       for (const issue of issues) {
      #         if (issue.number === context.issue.number) {
      #           continue
      #         }

      #         if (issue.pull_request) {
      #           return // Creator is already a contributor.
      #         }
      #       }

      #       await github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: `**Welcome**, new contributor!

      #           Please make sure you're read our [contributing guide](CONTRIBUTING.md) and we look forward to reviewing your Pull request shortly âœ¨`
      #       })